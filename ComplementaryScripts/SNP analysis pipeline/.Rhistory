return(ss0)
}
for (i in seq(length(mutated_test$Chr))){
mutated_test$Gene2[i] <- getGeneName(mutated_test$Chr[i],mutated_test$Pos[i])
}
library(tidyverse)
library(stringr)
## parse the genomic gbff file
s288 <- scan("data/GCF_000146045.2_R64_genomic.gbff", sep = "\n", what = "complex")
s288_n <- s288[72:length(s288)]
s288_n <- str_replace_all(s288_n, "     ", "")
# gene feature summary
gene <- which(str_detect(s288_n, "gene  ") ==TRUE)
gene_name <- gene+1
gene_orf <- gene+2
gene_feature <- data.frame(gene_name=character(length = length(gene_name)), stringsAsFactors = FALSE)
gene_feature$gene_name <- s288_n[gene_name]
gene_feature$gene_orf <- s288_n[gene_orf]
gene_feature$complement <- s288_n[gene]
gene_feature$gene_name <- str_replace_all(gene_feature$gene_name, "/", "")
gene_feature$gene_orf <- str_replace_all(gene_feature$gene_orf, "/", "")
for (i in seq(length(gene_feature$gene_name))){ # seq in R and range in python
if (str_detect(gene_feature$gene_name[i], "locus_tag")){
gene_feature$gene_orf[i] <- gene_feature$gene_name[i]
gene_feature$gene_name[i] <- ""
} else{
gene_feature$gene_orf[i] <- gene_feature$gene_orf[i]
gene_feature$gene_name[i] <- gene_feature$gene_name[i]
}
}
gene_feature0 <- select(gene_feature, gene_orf, complement)
colnames(gene_feature0) <- c('locus_tag','location')
gene_feature0$locus_tag <- str_replace_all(gene_feature0$locus_tag, "locus_tag=","") %>%
str_replace_all(.,"\"","") %>%
str_trim(.,side = "both")
gene_feature0$location <- str_replace_all(gene_feature0$location, "gene ","")
#mRNA feature summary
mRNA1 <- which(str_detect(s288_n, "mRNA  ") ==TRUE)
mRNA_feature <- data.frame(location=s288_n[mRNA1], stringsAsFactors = FALSE)
mRNA_feature$gene <- s288_n[mRNA1+1]
mRNA_feature$locus_tag <- s288_n[mRNA1+2]
mRNA_feature$product <- s288_n[mRNA1+3]
for (i in seq(length(mRNA1))){
if(str_detect(mRNA_feature$gene[i],"locus_tag")){
mRNA_feature$locus_tag[i] <- mRNA_feature$gene[i]
mRNA_feature$gene[i] <- ""
} else{
mRNA_feature$locus_tag[i] <- mRNA_feature$locus_tag[i]
mRNA_feature$gene[i] <- mRNA_feature$gene[i]
}
if(str_detect(mRNA_feature$locus_tag[i],"gene")){
mRNA_feature$locus_tag[i] <- mRNA_feature$product[i]
mRNA_feature$location[i] <- paste0(mRNA_feature$location[1], mRNA_feature$gene[1])
} else{
mRNA_feature$locus_tag[i] <- mRNA_feature$locus_tag[i]
mRNA_feature$location[i] <- mRNA_feature$location[i]
}
}
mRNA_feature0 <- select(mRNA_feature, locus_tag, location)
mRNA_feature0$locus_tag <- str_replace_all(mRNA_feature0$locus_tag, "\\/locus_tag=","") %>%
str_replace_all(.,"\"","") %>%
str_trim(.,side = "both")
mRNA_feature0$location <- str_replace_all(mRNA_feature0$location, "mRNA ","")
#CDS feature summary
CDS <- which(str_detect(s288_n, "CDS  ") ==TRUE)
CDS_feature <- data.frame(location=s288_n[CDS], stringsAsFactors = FALSE)
CDS_feature$gene <- s288_n[CDS+1]
CDS_feature$locus_tag <- s288_n[CDS+2]
CDS_feature$note <- s288_n[CDS+3]
for (i in seq(length(CDS))){
if(str_detect(CDS_feature$gene[i],"locus_tag")){
CDS_feature$locus_tag[i] <- CDS_feature$gene[i]
CDS_feature$gene[i] <- ""
} else{
CDS_feature$locus_tag[i] <- CDS_feature$locus_tag[i]
CDS_feature$gene[i] <- CDS_feature$gene[i]
}
if(str_detect(CDS_feature$locus_tag[i],"gene")){
CDS_feature$locus_tag[i] <- CDS_feature$note[i]
CDS_feature$location[i] <- paste0(CDS_feature$location[1], CDS_feature$gene[1])
} else{
CDS_feature$locus_tag[i] <- CDS_feature$locus_tag[i]
CDS_feature$location[i] <- CDS_feature$location[i]
}
}
CDS_feature0 <- select(CDS_feature,location,locus_tag)
CDS_feature0$locus_tag <- str_replace_all(CDS_feature0$locus_tag, "\\/locus_tag=","") %>%
str_replace_all(.,"\"","") %>%
str_trim(.,side = "both")
CDS_feature0$location <- str_replace_all(CDS_feature0$location, "CDS ","")
## cds fna file analysis
s288_cds <- scan("data/GCF_000146045.2_R64_cds_from_genomic.fna", sep = "\n", what = "complex")
s288_cds[1:200]
index1 <- which(str_detect(s288_cds,">"))
cds <- s288_cds[index1]
cds <- str_replace_all(cds, ">","")
cds <- str_replace_all(cds, " \\[","@")
cds <- str_replace_all(cds, "\\]","")
cds0 <- str_split(cds,"@")
locus <- vector()
gene <- vector()
location_index <- vector()
location <- vector()
for (i in seq(length(cds0))){
locus[i] <- which(str_detect(cds0[[i]],"locus_tag="))
gene[i] <- cds0[[i]][locus[i]]
location_index[i] <- which(str_detect(cds0[[i]],"location="))
location[i] <- cds0[[i]][location_index[i]]
}
cds_fna <- data.frame(gene=gene, location= location, stringsAsFactors = FALSE)
seq_cds <- list()
for (i in seq(length(index1)-1)){
seq_cds[[i]] <- s288_cds[(index1[i]+1):(index1[i+1]-1)]
}
seq_cds[[6008]] <- s288_cds[(index1[length(index1)]+1):length(s288_cds)]
nchar(paste(seq_cds[[6008]], sep = "", collapse = ""))
for (i in 1:6008){
cds_fna$cds[i] <- paste(seq_cds[[i]], sep = "", collapse = "")
cds_fna$length_cds[i] <- nchar(cds_fna$cds[i])
}
cds_fna$gene <- str_replace_all(cds_fna$gene, "locus_tag=", "")
##gene location summary based on the above three files:
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
##give the mRNA seq, mRNA length, amino acid sequece and amino acid length
library(readr)
s288_SGD <- read_tsv('data/s288_genome.tsv')
gene_feature0$cds_location <- getSingleReactionFormula(cds_fna$location,cds_fna$gene,gene_feature0$locus_tag)
gene_feature0$cds_seq <- getSingleReactionFormula(cds_fna$cds,cds_fna$gene,gene_feature0$locus_tag)
gene_feature0$cds_length <- getSingleReactionFormula(cds_fna$length_cds,cds_fna$gene,gene_feature0$locus_tag)
gene_feature0$aa_seq <- getSingleReactionFormula(s288_SGD$protein_residue,s288_SGD$systematic_name,gene_feature0$locus_tag)
gene_feature0$aa_length <- getSingleReactionFormula(s288_SGD$protein_length,s288_SGD$systematic_name,gene_feature0$locus_tag)
gene_feature0$chromosome <- getSingleReactionFormula(s288_SGD$chromosome,s288_SGD$systematic_name,gene_feature0$locus_tag)
gene_feature0$start <- getSingleReactionFormula(s288_SGD$locations_start,s288_SGD$systematic_name,gene_feature0$locus_tag)
gene_feature0$end <- getSingleReactionFormula(s288_SGD$locations_end,s288_SGD$systematic_name,gene_feature0$locus_tag)
#gene_feature0$DNA_SGD <- getSingleReactionFormula(s288_SGD$sequence,s288_SGD$systematic_name,gene_feature0$locus_tag) It should be note the gene sequence from SGD seems not right
gene_feature0$start <- as.numeric(gene_feature0$start)
gene_feature0$end <- as.numeric(gene_feature0$end)
##choose the metabolic genes
library(readxl)
gene_list_yeastGEM <- read_excel("data/gene_list_yeastGEM.xlsx")
index1 <-  which (gene_feature0$locus_tag %in% gene_list_yeastGEM$geneNames ==TRUE)
gene_feature_GEM <- gene_feature0[index1,]
##evaluate the quality
gene_feature_GEM$check <- ((as.numeric(gene_feature_GEM$cds_length))/3-1) == as.numeric(gene_feature_GEM$aa_length)
View(gene_feature0)
#the function is used to obtain a list which contains the coordinate information of each
# A T C G
library(stringr)
library(tidyverse)
gene_feature_GEM$aa_length[570]<- 338 # every protein should have parameter of aa_length
getGeneCoordinate <- function(gene_name, genesum = gene_feature_GEM ){
#gene_name <- "YIL111W" # example
ss <- filter(genesum, locus_tag==gene_name)
gene_snp <- list()
cds_seq <- vector()
if(str_detect(ss$location[1], "complement")==FALSE){ #complement means the seq in the -1 strand
ll <- ss$cds_location
ll1 <- unlist(str_split(ll, ","))
ll1 <- str_replace_all(ll1, "location=join\\(","") %>%
str_replace_all(.,"\\)","") %>%
str_replace_all(.,"location=", "")
tt <- list()
for (i in seq(length(ll1))){
if(str_detect(ll1[i],"\\.\\." )){
tt[[i]] <- unlist(str_split(ll1[i],"\\.\\."))
} else{
tt[[i]] <- ll1[i]
}
}
tt0 <- list()
for (i in seq(length(tt))){
if(length(tt[[i]])==2) {
tt0[[i]] <- seq(as.numeric(tt[[i]][1]), as.numeric(tt[[i]][2]),1)
} else{
tt0[[i]] <-tt[[i]][1]
}
}
cds_seq <- unlist(tt0)
gene_snp[['gene']] <- unlist(strsplit(ss$cds_seq[1], split = ""))
# cds_location
gene_snp[['gene_coordinate']] <- cds_seq
gene_snp[['protein']] <- unlist(strsplit(ss$aa_seq[1], split = ""))
gene_snp[['protein_coordinate']] <- seq(as.numeric(ss$aa_length[1]))
} else{
ss <- filter(genesum, locus_tag==gene_name)
ll <- ss$cds_location
ll1 <- unlist(str_split(ll, ","))
ll1 <- str_replace_all(ll1, "location=complement\\(join\\(","") %>%
str_replace_all(.,"\\)","") %>%
str_replace_all(.,"location=complement\\(", "")
tt <- list()
for (i in seq(length(ll1))){
if(str_detect(ll1[i],"\\.\\." )){
tt[[i]] <- unlist(str_split(ll1[i],"\\.\\."))
} else{
tt[[i]] <- ll1[i]
}
}
tt0 <- list()
for (i in seq(length(tt),1,-1)){
if(length(tt[[i]]==2)){
tt0[[i]] <- seq(as.numeric(tt[[i]][2]), as.numeric(tt[[i]][1]),-1)
cds_seq <- c(cds_seq, unlist(tt0[[i]]))
} else{
tt0[[i]] <- as.numeric(tt[[i]][1])
cds_seq <- c(cds_seq, unlist(tt0[[i]]))
}
}
gene_snp[['gene']] <- unlist(strsplit(ss$cds_seq[1], split = ""))
# cds_location
gene_snp[['gene_coordinate']] <- cds_seq
gene_snp[['protein']] <- unlist(strsplit(ss$aa_seq[1], split = ""))
gene_snp[['protein_coordinate']] <- seq(as.numeric(ss$aa_length[1]))
}
return(gene_snp)
}
for (i in 1:1226) {
print(gene_feature_GEM$locus_tag[i])
print(getGeneCoordinate(gene_feature_GEM$locus_tag[i]))
}
library(tidyverse)
library(stringr)
library(readxl)
#common function
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
#get the gene name
#try to calculate the mutation on the amino acids based on the coordination on the chromosome
mutated_test <- read_excel("data/snp_adaption_to_high_ethanol.XLS")
mutated_test$Chr <- str_trim(mutated_test$Chr, side = "both")
mutated_test$Pos <- as.numeric(mutated_test$Pos)
#function get the gene name based on the mutation position
getGeneName <- function(chr,mutated_positions,gene_annotation = gene_feature0){
#input:
#1. chr: chromsome
#2. mutated_positiion
#3. gene_featured0: contains the gene sequence information from chromsome of sec-s288c ,like the start and end
#output:
# the gene name contained this mutation
ss <- filter(gene_feature0,
chromosome == chr &
start <= mutated_positions &
end >= mutated_positions)
if(length(ss$locus_tag)){
ss0 <- ss$locus_tag
} else{
ss0 <- "INTERGENIC"
}
return(ss0)
}
for (i in seq(length(mutated_test$Chr))){
mutated_test$Gene2[i] <- getGeneName(mutated_test$Chr[i],mutated_test$Pos[i])
}
mutated_test0 <- filter(mutated_test, Gene2 != "INTERGENIC") ##filter the mutated test
#choose the metabolic gene
gene_feature_GEM$complement_sign <- str_detect(gene_feature_GEM$cds_location,"complement")
index_m <- which(mutated_test0$Gene2 %in% gene_feature_GEM$locus_tag ==TRUE)
mutated_gene <- mutated_test0[index_m,]
mutated_gene$Ref <- str_trim(mutated_gene$Ref, side = "both")
mutated_gene$Alt <- str_trim(mutated_gene$Alt, side = "both")
#The followed part is based on one gene under different condition
#mutated gene information preprocess
#if mutation_position existed, get the mutated gene
#input the mutated information of gene from different conditons or strains
#if the cds from the minus strand, then the functin changeATCG should be used to firstly
#get the mutation information on the minus strand based on that from the positive strand
changeATCG <- function (ss){
# this function was used to get the mutation information from the minus strand based on the mutation information
# on the positive strand
if (ss =="A"){
ss <- "T"
} else if(ss=="C"){
ss <- "G"
} else if(ss=="T"){
ss <-"A"
} else if(ss=="G"){
ss <-"C"
}
return(ss)
}
mutated_gene$complement_sign <- getSingleReactionFormula(gene_feature_GEM$complement_sign,gene_feature_GEM$locus_tag,mutated_gene$Gene2)
mutated_gene1 <- mutated_gene
for (i in seq(length(mutated_gene1$Chr))){
if(mutated_gene1$complement_sign[i]){
mutated_gene1$Ref[i] <- changeATCG(mutated_gene1$Ref[i])
mutated_gene1$Alt[i] <- changeATCG(mutated_gene1$Alt[i])
} else{
mutated_gene1$Ref[i] <- mutated_gene1$Ref[i]
mutated_gene1$Alt[i] <- mutated_gene1$Alt[i]
}
}
ss <- length(unique(mutated_gene1$Gene2))
#using function to obtain the each gene's mutation information based on the processed mutation data
#These function is used to obtain the count of mutation on portein level
countMutationProtein <- function (gene_name, mutation_annotation=mutated_gene1){
#this function could produce the all the results about mutated amino acids information
#gene_name <- "YDL205C"
mutated_gene0 <- filter(mutation_annotation, Gene2==gene_name)
tt <- rep(0,length(gene_snp[['protein']]))
for (i in seq(length(mutated_gene0$Gene2))){
tt <- tt + findPPosition(mutated_gene0$Pos[i],mutated_gene0$Alt[i],gene_name)
}
return(tt)
}
findPPosition <- function(mutatedPosition, alted, geneName){
#this function is used to find the postion of mutated amino acids based on genomics mutation
#mutatedPosition = 93192
#alted ='A'
mutation_position <- which(gene_snp[['gene_coordinate']]==mutatedPosition)
gene_snp <- getGeneCoordinate(gene_name = geneName, genesum = gene_feature_GEM)
gene_snp[['gene']][mutation_position] <- alted
#translation
library(seqinr)
realcds <- str_to_lower(paste(gene_snp[['gene']],collapse = ""))
toycds <- s2c(realcds)
gene_snp[['protein_mutated']] <- translate(seq = toycds)
#find the relative postion of mutated amino acids
aa_position <- which(gene_snp[['protein']] != gene_snp[['protein_mutated']] )
#calculate the mutation number in the mutated postion (for specific strain -x)
gene_snp[['mutation_position']] <- rep(0,length(gene_snp[['protein']])) #initialize the start value for each positions
gene_snp[['mutation_position']][aa_position] <- 1
result <- unlist(gene_snp[['mutation_position']])
return(result)
}
#first run the program for each gene from different conditions or strains
#pre-process the gene annotation data before mutation mapping
#update the mutation information in the protein level
gene_list  <- unique(mutated_gene1$Gene2)
tt <- vector()
for (i in 1:638){
ss = gene_list[i]
gene_snp <- getGeneCoordinate(gene_name = ss, genesum = gene_feature_GEM)
gene_snp[['pro_mutation_count']] <- countMutationProtein(gene_name = ss, mutation_annotation=mutated_gene1)
tt[i] <- sum(gene_snp[['pro_mutation_count']])
print(gene_snp)
}
library(tidyverse)
library(stringr)
library(readxl)
#common function
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
#get the gene name
#try to calculate the mutation on the amino acids based on the coordination on the chromosome
mutated_test <- read_excel("data/snp_adaption_to_high_ethanol.XLS")
mutated_test$Chr <- str_trim(mutated_test$Chr, side = "both")
mutated_test$Pos <- as.numeric(mutated_test$Pos)
#function get the gene name based on the mutation position
getGeneName <- function(chr,mutated_positions,gene_annotation = gene_feature0){
#input:
#1. chr: chromsome
#2. mutated_positiion
#3. gene_featured0: contains the gene sequence information from chromsome of sec-s288c ,like the start and end
#output:
# the gene name contained this mutation
ss <- filter(gene_feature0,
chromosome == chr &
start <= mutated_positions &
end >= mutated_positions)
if(length(ss$locus_tag)){
ss0 <- ss$locus_tag
} else{
ss0 <- "INTERGENIC"
}
return(ss0)
}
for (i in seq(length(mutated_test$Chr))){
mutated_test$Gene2[i] <- getGeneName(mutated_test$Chr[i],mutated_test$Pos[i])
}
mutated_test0 <- filter(mutated_test, Gene2 != "INTERGENIC") ##filter the mutated test
View(mutated_test0)
#choose the metabolic gene
#if the gene is type of "complement", then the complement_sign is "TRUE"
#else the complement_sign is "FALSE"
gene_feature_GEM$complement_sign <- str_detect(gene_feature_GEM$cds_location,"complement")
index_m <- which(mutated_test0$Gene2 %in% gene_feature_GEM$locus_tag ==TRUE)
mutated_gene <- mutated_test0[index_m,]
View(gene_feature_GEM)
mutated_gene$Ref <- str_trim(mutated_gene$Ref, side = "both")
mutated_gene$Alt <- str_trim(mutated_gene$Alt, side = "both")
changeATCG <- function (ss){
# this function was used to get the mutation information from the minus strand based on the mutation information
# on the positive strand
if (ss =="A"){
ss <- "T"
} else if(ss=="C"){
ss <- "G"
} else if(ss=="T"){
ss <-"A"
} else if(ss=="G"){
ss <-"C"
}
return(ss)
}
mutated_gene$complement_sign <- getSingleReactionFormula(gene_feature_GEM$complement_sign,gene_feature_GEM$locus_tag,mutated_gene$Gene2)
mutated_gene1 <- mutated_gene
for (i in seq(length(mutated_gene1$Chr))){
if(mutated_gene1$complement_sign[i]){
mutated_gene1$Ref[i] <- changeATCG(mutated_gene1$Ref[i])
mutated_gene1$Alt[i] <- changeATCG(mutated_gene1$Alt[i])
} else{
mutated_gene1$Ref[i] <- mutated_gene1$Ref[i]
mutated_gene1$Alt[i] <- mutated_gene1$Alt[i]
}
}
View(mutated_gene1)
ss <- length(unique(mutated_gene1$Gene2))
#using function to obtain the each gene's mutation information based on the processed mutation data
#These function is used to obtain the count of mutation on portein level
countMutationProtein <- function (gene_name, mutation_annotation=mutated_gene1){
#this function could produce the all the results about mutated amino acids information
#gene_name <- "YDL205C"
mutated_gene0 <- filter(mutation_annotation, Gene2==gene_name)
tt <- rep(0,length(gene_snp[['protein']]))
for (i in seq(length(mutated_gene0$Gene2))){
tt <- tt + findPPosition(mutated_gene0$Pos[i],mutated_gene0$Alt[i],gene_name)
}
return(tt)
}
findPPosition <- function(mutatedPosition, alted, geneName){
#this function is used to find the postion of mutated amino acids based on genomics mutation
#mutatedPosition = 93192
#alted ='A'
mutation_position <- which(gene_snp[['gene_coordinate']]==mutatedPosition)
gene_snp <- getGeneCoordinate(gene_name = geneName, genesum = gene_feature_GEM)
gene_snp[['gene']][mutation_position] <- alted
#translation
library(seqinr)
realcds <- str_to_lower(paste(gene_snp[['gene']],collapse = ""))
toycds <- s2c(realcds)
gene_snp[['protein_mutated']] <- translate(seq = toycds)
#find the relative postion of mutated amino acids
aa_position <- which(gene_snp[['protein']] != gene_snp[['protein_mutated']] )
#calculate the mutation number in the mutated postion (for specific strain -x)
gene_snp[['mutation_position']] <- rep(0,length(gene_snp[['protein']])) #initialize the start value for each positions
gene_snp[['mutation_position']][aa_position] <- 1
result <- unlist(gene_snp[['mutation_position']])
return(result)
}
#first run the program for each gene from different conditions or strains
#pre-process the gene annotation data before mutation mapping
#update the mutation information in the protein level
gene_list  <- unique(mutated_gene1$Gene2)
tt <- vector()
for (i in 1:638){
ss = gene_list[i]
gene_snp <- getGeneCoordinate(gene_name = ss, genesum = gene_feature_GEM)
gene_snp[['pro_mutation_count']] <- countMutationProtein(gene_name = ss, mutation_annotation=mutated_gene1)
tt[i] <- sum(gene_snp[['pro_mutation_count']])
print(gene_snp)
}
#results analysis
num_gene_with_nsSNP <- tt[tt > 0]
num_nsSNP <- sum(num_nsSNP)
num_gene_with_nsSNP <- tt[tt > 0]
num_nsSNP <- sum(num_nsSNP)
num_gene_with_nsSNP
#results analysis
num_gene_with_nsSNP <- tt[tt > 0]
num_nsSNP <- sum(num_gene_with_nsSNP)
protein_mutation <- data.frame(orf=gene_list,nsSNP=tt)
View(protein_mutation)
##choose the metabolic genes
library(readxl)
gene_list_yeastGEM <- read_excel("data/gene_list_yeastGEM.xlsx")
index1 <-  which (gene_feature0$locus_tag %in% gene_list_yeastGEM$geneNames ==TRUE)
gene_feature_GEM <- gene_feature0[index1,]
ss = 'YPR184W'
gene_snp <- getGeneCoordinate(gene_name = ss, genesum = gene_feature_GEM)
gene_snp[['pro_mutation_count']] <- countMutationProtein(gene_name = ss, mutation_annotation=mutated_gene1)
pos_mutation <- which(gene_snp[['pro_mutation_count']] != 0)
pos_mutation
